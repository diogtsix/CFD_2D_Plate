import numpy as np
import matplotlib.pyplot as plt

class BlasiusSolver:
    def __init__(self, plate_length, dx, dy):
        self.plate_length = plate_length
        self.dx = dx
        self.dy = dy
        self.grid_nodes_x = None
        self.grid_nodes_y = None
        self.velocity_profile = None

    def create_grid(self):
        x_nodes = int(self.plate_length / self.dx) + 1
        y_nodes = int(1 / self.dy) + 1

        x_coords = np.linspace(0, self.plate_length, x_nodes)
        y_coords = np.linspace(0, 1, y_nodes)

        self.grid_nodes_x, self.grid_nodes_y = np.meshgrid(x_coords, y_coords)

    def solve(self):
        self.create_grid()
        self.velocity_profile = np.zeros_like(self.grid_nodes_y)

        for j in range(self.grid_nodes_y.shape[0]):
            for i in range(self.grid_nodes_y.shape[1]):
                eta = self.grid_nodes_y[j, i] * np.sqrt(self.grid_nodes_x[j, i])
                self.velocity_profile[j, i] = 2.0 * np.gradient(eta - np.gradient(eta))

    def plot_velocity_profile(self):
        plt.plot(self.velocity_profile[:, 0], self.grid_nodes_y[:, 0])
        plt.xlabel('Velocity Profile')
        plt.ylabel('Y-coordinate')
        plt.title('Blasius Velocity Profile')
        plt.grid()
        plt.show()

if __name__ == "__main__":
    plate_length = 1.0
    dx = 0.1
    dy = 0.1

    blasius_solver = BlasiusSolver(plate_length, dx, dy)
    blasius_solver.solve()
    blasius_solver.plot_velocity_profile()